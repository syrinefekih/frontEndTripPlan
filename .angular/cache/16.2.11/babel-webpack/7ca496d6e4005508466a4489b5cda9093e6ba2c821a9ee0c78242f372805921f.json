{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../workflow.service\";\nexport class ResumeComponent {\n  constructor(route, http, workflowService, router) {\n    this.route = route;\n    this.http = http;\n    this.workflowService = workflowService;\n    this.router = router;\n    this.id = 0;\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      this.id = params.get('id');\n    });\n    this.getFlight(this.userId);\n    this.getHotel(this.userId);\n    this.activities = this.getActivities(); // Populate with actual activities\n  }\n\n  getFlight(userId) {\n    this.http.get(`http://localhost:8089/flights/flight/${userId}`).subscribe(data => {\n      this.flight = data;\n    }, error => {\n      console.error('Error fetching flight data', error);\n    });\n  }\n  getHotel(userId) {\n    this.http.get(`http://localhost:8089/hotels/hotel/${userId}`).subscribe(data => {\n      this.hotel = data;\n    }, error => {\n      console.error('Error fetching hotel data', error);\n    });\n  }\n  getActivities() {\n    // Ideally, these activities should be fetched from the backend or based on the country visited.\n    return ['Activity 1', 'Activity 2', 'Activity 3'];\n  }\n  static #_ = this.ɵfac = function ResumeComponent_Factory(t) {\n    return new (t || ResumeComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.WorkflowService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResumeComponent,\n    selectors: [[\"app-resume\"]],\n    decls: 2,\n    vars: 0,\n    template: function ResumeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"resume works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["ResumeComponent","constructor","route","http","workflowService","router","id","ngOnInit","paramMap","subscribe","params","get","getFlight","userId","getHotel","activities","getActivities","data","flight","error","console","hotel","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","HttpClient","i3","WorkflowService","Router","_2","selectors","decls","vars","template","ResumeComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["D:\\newsemantic\\semantic-front\\src\\app\\resume\\resume.component.ts","D:\\newsemantic\\semantic-front\\src\\app\\resume\\resume.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { WorkflowService } from '../workflow.service';\n\n@Component({\n  selector: 'app-resume',\n  templateUrl: './resume.component.html',\n  styleUrls: ['./resume.component.css']\n})\nexport class ResumeComponent {\n  id = 0 as number ;\n  flight: any;\n  hotel: any;\n  activities: string[]; // List of activities\n\n  constructor(private route: ActivatedRoute,private http: HttpClient,private workflowService : WorkflowService, private router: Router) { }\n\n  ngOnInit() {\n    this.route.paramMap.subscribe((params: { get: (arg0: string) => any; }) => {\n      this.id = params.get('id'); \n    });\n    this.getFlight(this.userId);\n    this.getHotel(this.userId);\n    this.activities = this.getActivities(); // Populate with actual activities\n  }\n\n  getFlight(userId: number) {\n    this.http.get(`http://localhost:8089/flights/flight/${userId}`)\n      .subscribe(data => {\n        this.flight = data;\n      }, error => {\n        console.error('Error fetching flight data', error);\n      });\n  }\n\n  getHotel(userId: number) {\n    this.http.get(`http://localhost:8089/hotels/hotel/${userId}`)\n      .subscribe(data => {\n        this.hotel = data;\n      }, error => {\n        console.error('Error fetching hotel data', error);\n      });\n  }\n\n  getActivities(): string[] {\n    // Ideally, these activities should be fetched from the backend or based on the country visited.\n    return ['Activity 1', 'Activity 2', 'Activity 3'];\n  }\n}\n}\n","<p>resume works!</p>\n"],"mappings":";;;;AAUA,OAAM,MAAOA,eAAe;EAM1BC,YAAoBC,KAAqB,EAASC,IAAgB,EAASC,eAAiC,EAAUC,MAAc;IAAhH,KAAAH,KAAK,GAALA,KAAK;IAAyB,KAAAC,IAAI,GAAJA,IAAI;IAAqB,KAAAC,eAAe,GAAfA,eAAe;IAA4B,KAAAC,MAAM,GAANA,MAAM;IAL5H,KAAAC,EAAE,GAAG,CAAW;EAKwH;EAExIC,QAAQA,CAAA;IACN,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACC,SAAS,CAAEC,MAAuC,IAAI;MACxE,IAAI,CAACJ,EAAE,GAAGI,MAAM,CAACC,GAAG,CAAC,IAAI,CAAC;IAC5B,CAAC,CAAC;IACF,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,MAAM,CAAC;IAC3B,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACD,MAAM,CAAC;IAC1B,IAAI,CAACE,UAAU,GAAG,IAAI,CAACC,aAAa,EAAE,CAAC,CAAC;EAC1C;;EAEAJ,SAASA,CAACC,MAAc;IACtB,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAC,wCAAwCE,MAAM,EAAE,CAAC,CAC5DJ,SAAS,CAACQ,IAAI,IAAG;MAChB,IAAI,CAACC,MAAM,GAAGD,IAAI;IACpB,CAAC,EAAEE,KAAK,IAAG;MACTC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACN;EAEAL,QAAQA,CAACD,MAAc;IACrB,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAC,sCAAsCE,MAAM,EAAE,CAAC,CAC1DJ,SAAS,CAACQ,IAAI,IAAG;MAChB,IAAI,CAACI,KAAK,GAAGJ,IAAI;IACnB,CAAC,EAAEE,KAAK,IAAG;MACTC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD,CAAC,CAAC;EACN;EAEAH,aAAaA,CAAA;IACX;IACA,OAAO,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,CAAC;EACnD;EAAC,QAAAM,CAAA,G;qBAtCUtB,eAAe,EAAAuB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,UAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,eAAA,GAAAP,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAM,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAfhC,eAAe;IAAAiC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCV5Bf,EAAA,CAAAiB,cAAA,QAAG;QAAAjB,EAAA,CAAAkB,MAAA,oBAAa;QAAAlB,EAAA,CAAAmB,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}