{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ResultComponent = class ResultComponent {\n  constructor(http, route, semanticService, router) {\n    this.http = http;\n    this.route = route;\n    this.semanticService = semanticService;\n    this.router = router;\n    this.resource = {\n      departureDate: new Date().toISOString().split('T')[0]\n    };\n  }\n  ngOnInit() {\n    this.resultData = history.state.data;\n    console.log('Result Data received from the submit:', this.resultData);\n  }\n  confirm(resource) {\n    // Assuming you have an endpoint named 'confirmResource' in your SemanticService\n    // Adjust the endpoint name as per your actual service\n    this.semanticService.confirmResource({\n      surfaceForm: resource['@surfaceForm'],\n      arrivalDate: resource.arrivalDate,\n      departureDate: resource.departureDate\n    }).subscribe(response => {\n      // Handle successful confirmation if needed\n      console.log('Confirmation response:', response);\n    }, error => {\n      // Handle error if the confirmation fails\n      console.error('Confirmation error:', error);\n    });\n  }\n  confirm2(resource) {\n    const fromId = 'BOM.AIRPORT'; // Replace with your fromId value\n    const toId = 'DEL.AIRPORT'; // Replace with your toId value\n    const url = `http://localhost:8089/flights/getMinFlightPrice`;\n    const params = {\n      fromId: fromId,\n      toId: toId,\n      departDate: resource.departureDate,\n      currencyCode: 'AED'\n    };\n    this.http.get(url, {\n      params\n    }).subscribe(response => {\n      console.log('Flight search result:', response);\n      this.router.navigate(['/flight-result'], {\n        state: {\n          data: response\n        }\n      });\n    }, error => {\n      console.error('Error occurred:', error);\n      // Handle error responses\n    });\n  }\n};\n\nResultComponent = __decorate([Component({\n  selector: 'app-result',\n  templateUrl: './result.component.html',\n  styleUrls: ['./result.component.css']\n})], ResultComponent);","map":{"version":3,"names":["Component","ResultComponent","constructor","http","route","semanticService","router","resource","departureDate","Date","toISOString","split","ngOnInit","resultData","history","state","data","console","log","confirm","confirmResource","surfaceForm","arrivalDate","subscribe","response","error","confirm2","fromId","toId","url","params","departDate","currencyCode","get","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\User\\Desktop\\semanticsy\\semantic-front\\src\\app\\result\\result.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { SemanticService } from '../semantic.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-result',\n  templateUrl: './result.component.html',\n  styleUrls: ['./result.component.css']\n})\nexport class ResultComponent implements OnInit {\n  resultData: any;\n  resource = { departureDate: new Date().toISOString().split('T')[0] };\n\n  constructor(private http: HttpClient,private route: ActivatedRoute,private semanticService: SemanticService private router: Router) {}\n\n  ngOnInit() {\n    this.resultData = history.state.data;\n    console.log('Result Data received from the submit:', this.resultData);\n  }\n  confirm(resource: any) {\n    // Assuming you have an endpoint named 'confirmResource' in your SemanticService\n    // Adjust the endpoint name as per your actual service\n    this.semanticService.confirmResource({\n      surfaceForm: resource['@surfaceForm'],\n      arrivalDate: resource.arrivalDate,\n      departureDate: resource.departureDate\n    }).subscribe(\n      response => {\n        // Handle successful confirmation if needed\n        console.log('Confirmation response:', response);\n      },\n      error => {\n        // Handle error if the confirmation fails\n        console.error('Confirmation error:', error);\n      }\n    );\n\n  }\n\n  confirm2(resource: any) {\n    const fromId = 'BOM.AIRPORT'; // Replace with your fromId value\n    const toId = 'DEL.AIRPORT'; // Replace with your toId value\n\n    const url = `http://localhost:8089/flights/getMinFlightPrice`;\n    const params = {\n      fromId: fromId,\n      toId: toId,\n      departDate: resource.departureDate,\n      currencyCode: 'AED'\n    };\n\n    this.http.get<any>(url, { params }).subscribe(\n      (response) => {\n        console.log('Flight search result:', response);\n        this.router.navigate(['/flight-result'], { state: { data: response } });\n      },\n      (error) => {\n        console.error('Error occurred:', error);\n        // Handle error responses\n      }\n    );\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAI1BC,YAAoBC,IAAgB,EAASC,KAAqB,EAASC,eAAgC,EAASC,MAAc;IAA9G,KAAAH,IAAI,GAAJA,IAAI;IAAqB,KAAAC,KAAK,GAALA,KAAK;IAAyB,KAAAC,eAAe,GAAfA,eAAe;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAF1H,KAAAC,QAAQ,GAAG;MAAEC,aAAa,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAAC,CAAE;EAEiE;EAErIC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,GAAGC,OAAO,CAACC,KAAK,CAACC,IAAI;IACpCC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE,IAAI,CAACL,UAAU,CAAC;EACvE;EACAM,OAAOA,CAACZ,QAAa;IACnB;IACA;IACA,IAAI,CAACF,eAAe,CAACe,eAAe,CAAC;MACnCC,WAAW,EAAEd,QAAQ,CAAC,cAAc,CAAC;MACrCe,WAAW,EAAEf,QAAQ,CAACe,WAAW;MACjCd,aAAa,EAAED,QAAQ,CAACC;KACzB,CAAC,CAACe,SAAS,CACVC,QAAQ,IAAG;MACT;MACAP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,QAAQ,CAAC;IACjD,CAAC,EACDC,KAAK,IAAG;MACN;MACAR,OAAO,CAACQ,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CACF;EAEH;EAEAC,QAAQA,CAACnB,QAAa;IACpB,MAAMoB,MAAM,GAAG,aAAa,CAAC,CAAC;IAC9B,MAAMC,IAAI,GAAG,aAAa,CAAC,CAAC;IAE5B,MAAMC,GAAG,GAAG,iDAAiD;IAC7D,MAAMC,MAAM,GAAG;MACbH,MAAM,EAAEA,MAAM;MACdC,IAAI,EAAEA,IAAI;MACVG,UAAU,EAAExB,QAAQ,CAACC,aAAa;MAClCwB,YAAY,EAAE;KACf;IAED,IAAI,CAAC7B,IAAI,CAAC8B,GAAG,CAAMJ,GAAG,EAAE;MAAEC;IAAM,CAAE,CAAC,CAACP,SAAS,CAC1CC,QAAQ,IAAI;MACXP,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEM,QAAQ,CAAC;MAC9C,IAAI,CAAClB,MAAM,CAAC4B,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;QAAEnB,KAAK,EAAE;UAAEC,IAAI,EAAEQ;QAAQ;MAAE,CAAE,CAAC;IACzE,CAAC,EACAC,KAAK,IAAI;MACRR,OAAO,CAACQ,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC;IACF,CAAC,CACF;EACH;CACD;;AArDYxB,eAAe,GAAAkC,UAAA,EAL3BnC,SAAS,CAAC;EACToC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWrC,eAAe,CAqD3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}