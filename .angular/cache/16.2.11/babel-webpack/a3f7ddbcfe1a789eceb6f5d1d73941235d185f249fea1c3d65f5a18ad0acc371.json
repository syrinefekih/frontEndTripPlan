{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ResultComponent = class ResultComponent {\n  constructor(route, semanticService) {\n    this.route = route;\n    this.semanticService = semanticService;\n  }\n  ngOnInit() {\n    this.resultData = history.state.data;\n    console.log('Result Data received from the submit:', this.resultData);\n  }\n  confirm(resource) {\n    // Assuming you have an endpoint named 'confirmResource' in your SemanticService\n    // Adjust the endpoint name as per your actual service\n    this.semanticService.confirmResource({\n      surfaceForm: resource['@surfaceForm'],\n      arrivalDate: resource.arrivalDate,\n      departureDate: resource.departureDate\n    }).subscribe(response => {\n      // Handle successful confirmation if needed\n      console.log('Confirmation response:', response);\n    }, error => {\n      // Handle error if the confirmation fails\n      console.error('Confirmation error:', error);\n    });\n  }\n};\nResultComponent = __decorate([Component({\n  selector: 'app-result',\n  templateUrl: './result.component.html',\n  styleUrls: ['./result.component.css']\n})], ResultComponent);","map":{"version":3,"names":["Component","ResultComponent","constructor","route","semanticService","ngOnInit","resultData","history","state","data","console","log","confirm","resource","confirmResource","surfaceForm","arrivalDate","departureDate","subscribe","response","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\User\\semantic\\src\\app\\result\\result.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'app-result',\n  templateUrl: './result.component.html',\n  styleUrls: ['./result.component.css']\n})\nexport class ResultComponent implements OnInit {\n  resultData: any;\n\n  constructor(private route: ActivatedRoute,private semanticService: SemanticService) {}\n\n  ngOnInit() {\n    this.resultData = history.state.data;\n    console.log('Result Data received from the submit:', this.resultData);\n  }\n  confirm(resource: any) {\n    // Assuming you have an endpoint named 'confirmResource' in your SemanticService\n    // Adjust the endpoint name as per your actual service\n    this.semanticService.confirmResource({\n      surfaceForm: resource['@surfaceForm'],\n      arrivalDate: resource.arrivalDate,\n      departureDate: resource.departureDate\n    }).subscribe(\n      response => {\n        // Handle successful confirmation if needed\n        console.log('Confirmation response:', response);\n      },\n      error => {\n        // Handle error if the confirmation fails\n        console.error('Confirmation error:', error);\n      }\n    );\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAO1C,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAG1BC,YAAoBC,KAAqB,EAASC,eAAgC;IAA9D,KAAAD,KAAK,GAALA,KAAK;IAAyB,KAAAC,eAAe,GAAfA,eAAe;EAAoB;EAErFC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,GAAGC,OAAO,CAACC,KAAK,CAACC,IAAI;IACpCC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE,IAAI,CAACL,UAAU,CAAC;EACvE;EACAM,OAAOA,CAACC,QAAa;IACnB;IACA;IACA,IAAI,CAACT,eAAe,CAACU,eAAe,CAAC;MACnCC,WAAW,EAAEF,QAAQ,CAAC,cAAc,CAAC;MACrCG,WAAW,EAAEH,QAAQ,CAACG,WAAW;MACjCC,aAAa,EAAEJ,QAAQ,CAACI;KACzB,CAAC,CAACC,SAAS,CACVC,QAAQ,IAAG;MACT;MACAT,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEQ,QAAQ,CAAC;IACjD,CAAC,EACDC,KAAK,IAAG;MACN;MACAV,OAAO,CAACU,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CACF;EACH;CACD;AA3BYnB,eAAe,GAAAoB,UAAA,EAL3BrB,SAAS,CAAC;EACTsB,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWvB,eAAe,CA2B3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}